#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jihami:server');
var http = require('http');
var models = require("../models");
var database = models.sequelize;
var finale = require('finale-rest');
var server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var express = require('express'),
    bodyParser = require('body-parser');

//var app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

server = http.createServer(app);

/**
 * Initialize finale
 */ 
finale.initialize({
  app: app,
  sequelize: database
});
 
/**
 * Create REST resources
 */ 
var api_base = '/api/v1';

var messageResource = finale.resource({
  model: models['message'],
  endpoints: [
    `${api_base}/message`, 
    `${api_base}/messages/:message_id`
  ]
});

var smsResource = finale.resource({
  model: models['sms_log'],
  endpoints: [
    `${api_base}/sms_log`, 
    `${api_base}/sms_logs/:sms_log_id`
  ]
});

var subjectResource = finale.resource({
  model: models['study_subject'],
  endpoints: [
    `${api_base}/study_subject`, 
    `${api_base}/study_subjects/:study_subject_id`
  ]
});

var messageScheduleResource = finale.resource({
  model: models['message_schedule'],
  endpoints: [
    `${api_base}/message_schedule`, 
    `${api_base}/message_schedule/:message_schedule_id`
  ]
});

var userResource = finale.resource({
  model: models['user'],
  endpoints: [
    `${api_base}/user`, 
    `${api_base}/users/:user_id`
  ]
});


/**
 * Create database and listen
 */
database.sync().then(function() {
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
